/*************************************************************
  Download latest Blynk library here:
    https://github.com/blynkkk/blynk-library/releases/latest

  Blynk is a platform with iOS and Android apps to control
  Arduino, Raspberry Pi and the likes over the Internet.
  You can easily build graphic interfaces for all your
  projects by simply dragging and dropping widgets.

    Downloads, docs, tutorials: http://www.blynk.cc
    Sketch generator:           http://examples.blynk.cc
    Blynk community:            http://community.blynk.cc
    Follow us:                  http://www.fb.com/blynkapp
                                http://twitter.com/blynk_app

  Blynk library is licensed under MIT license
  This example code is in public domain.

 *************************************************************

  Blynk using a LED widget on your phone!

  App project setup:
    LED widget on V3
 *************************************************************/

/* Comment this out to disable prints and save space */
#define BLYNK_PRINT Serial


#include <SPI.h>
#include <ESP8266WiFi.h>
#include <BlynkSimpleEsp8266.h>
#include <TimeLib.h>
#include <WidgetRTC.h>


// You should get Auth Token in the Blynk App.
// Go to the Project Settings (nut icon).
char auth[] = "---------";

// Your WiFi credentials.
// Set password to "" for open networks.
char ssid[] = "";
char pass[] = "";

// Select your pin with physical button
const int btnPin = 0;    //D3

//show wifi ino
#define NUM 100
int counterInfo = NUM;

#define ESP8266_GPIO4    4 // D2 for Relay control. 
#define LED_BUILTIN      2   //D4

// pick colours from http://www.w3schools.com/colors/colors_picker.asp
#define BLYNK_RED         "#D3435C"  // used when RSSI is worse than -83 dBm (< 60%)
#define BLYNK_YELLOW      "#ED9D00"  // used when RSSI is between -83 dBm and -57 dBm (60% to 75%)
#define BLYNK_GREEN       "#23C48E"  // used when RSSI is better than -57 dBm (> 75%)

// Flag for sync on re-connection.
bool isFirstConnect = true;

volatile int relayState = HIGH;    // Blynk app pushbutton status.

WidgetLED led1(V1);
WidgetLED led3(V3);
WidgetTerminal terminal(V2);

BlynkTimer timer;
WidgetRTC rtc;

// V3 LED Widget represents the physical button state
boolean btnState = false;
void buttonLedWidget()
{
  // Read button
  boolean isPressed = (digitalRead(btnPin) == LOW);

  // If state has changed...
  if (isPressed != btnState) {
    if (isPressed) {
      led3.on();
    } else {
      led3.off();
    }
    btnState = isPressed;
  }
}

void reconnectBlynk() {                         // reconnect to server if disconnected, timer checks every 60 seconds
  if (!Blynk.connected()) {
    if(Blynk.connect()) {
      BLYNK_LOG("Reconnected");
    } else {
      BLYNK_LOG("Not reconnected");
    }
  }
}

void blickLED()
{
  digitalWrite(LED_BUILTIN, HIGH);   // turn the LED on (HIGH is the voltage level)
  delay(1000);              // wait for a second
  digitalWrite(LED_BUILTIN, LOW);    // turn the LED off by making the voltage LOW
  delay(1000);              // wait for a second
}
/*
// This function runs every time Blynk connection is established.
BLYNK_CONNECTED() {
  if ( isFirstConnect ) {
    Blynk.syncAll();
    isFirstConnect = false;

    printInfo();
    terminal.flush();
  }
}*/

// Blynk app relay command.
BLYNK_WRITE( V0 ) {
  if ( param.asInt() != relayState ) {
    relayState = !relayState;                  // Toggle state.
    digitalWrite( ESP8266_GPIO4, relayState ); // Relay control pin.
    Blynk.virtualWrite( V1, relayState*255 );  // Set Blynk app LED.
  }
}

void showRSSI(){
  //Serial.println(map(WiFi.RSSI(), -110, -30, 30, 100) + String('%'));
  if(WiFi.RSSI() < -83){
    Blynk.setProperty(V0, "color", BLYNK_RED);   // red gauge
  }
  else if(WiFi.RSSI() > -57){
    Blynk.setProperty(V0, "color", BLYNK_GREEN);   // green gauge
  }
  else{
    Blynk.setProperty(V0, "color", BLYNK_YELLOW);   // yellow gauge    
  }
  delay(30);
  Blynk.virtualWrite(V0, map(WiFi.RSSI(), -110, -30, 45, 90));
  //float cycle = millis() / (1000.0);
  //Blynk.virtualWrite(V1, cycle);
}

void printInfo()
{
  String currentTime = String(hour()) + ":" + minute() + ":" + second();
  String currentDate = String(day()) + " " + month() + " " + year();
  terminal.print("Current time: ");
  terminal.print(currentTime);
  terminal.print(" ");
  terminal.print(currentDate);
  terminal.println();

  terminal.println("WiFi connected.");  
  terminal.print("IP address: ");
  terminal.println(WiFi.localIP());
}


// You can send commands from Terminal to your hardware. Just use
// the same Virtual Pin as your Terminal Widget
BLYNK_WRITE(V2)
{
  if (String("info") == param.asStr() || String("Info") == param.asStr() ) {
    printInfo();
  } else {

    // Send it back
    Blynk.virtualWrite(V2, "You said:", param.asStr());
    terminal.println(); 
/*  OLDER EXAMPLE VERSION HAD THESE LINES     
*   terminal.print("You said:");
*   terminal.write(param.getBuffer(), param.getLength());
*   terminal.println(); 
*/
  }

  terminal.flush();
}

void setup()
{
  // Debug console
  Serial.begin(9600);
  Serial.println("\n Starting");

  // Set GPIO4 to high output
  digitalWrite(ESP8266_GPIO4, HIGH);
  pinMode( ESP8266_GPIO4, OUTPUT );       // Relay control pin.
  digitalWrite(ESP8266_GPIO4, HIGH);

  // Setup physical button pin (active low)
  pinMode(btnPin, INPUT_PULLUP);

  pinMode(LED_BUILTIN, OUTPUT);   // led on board

  Blynk.begin(auth, ssid, pass);
  int mytimeout = millis() / 1000;
  while (Blynk.connect(1000) == false) {        // wait here until connected to the server
    if((millis() / 1000) > mytimeout + 8){      // try to connect to the server for less than 9 seconds
      break;                                    // continue with the sketch regardless of connection to the server
    }
  }
  Serial.println(map(WiFi.RSSI(), -110, -30, 45, 90) + String('%'));

  Blynk.syncAll();
  rtc.begin();
  
  timer.setInterval(500L, buttonLedWidget);

  //timer.setInterval(15000, reconnectBlynk);     // check every 15 seconds if we are connected to the server

  timer.setInterval(300, showRSSI);             // was 600
}

void loop()
{
  Blynk.run();
  timer.run();

  if(Blynk.connected())
  {
     led1.on();
     digitalWrite(LED_BUILTIN, LOW);

     if(counterInfo == 0)
     {
      //wait for time sync up local then print
       printInfo();
       terminal.flush();
       counterInfo--;
     }
     else if(counterInfo > 0)
     {
       counterInfo--;
     }
  }
  else
  {
     led1.off();
     blickLED();

     counterInfo = NUM;
  }
}
